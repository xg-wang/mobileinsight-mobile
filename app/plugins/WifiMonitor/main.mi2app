#!/usr/bin/python

'''
A demo plugin to retrive various info from Android system,
including WiFi status and logcat output on certain process.

Author  : Zengwen Yuan, Yunqi Guo
Version : 1.1  Add BSS Info analytic task
          1.0  Init version based on Android logcat monitoring
'''

import os
import sys
import time
import datetime
import commands
import traceback
import subprocess
from jnius import autoclass, cast

from service import mi2app_utils as util
from mobile_insight.analyzer import Analyzer

ANDROID_SHELL = "/system/bin/sh"

search_proc = ["wpa_supplicant", "wpa", "wifi"]

class WifiMonitor(Analyzer):
    def __init__(self, proc_name):
        Analyzer.__init__(self)

        self.__log_dir = util.get_mobileinsight_log_path()
        if not os.path.exists(self.__log_dir):
            os.makedirs(self.__log_dir)

        self.__log_timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
        self.wifi_base_log = "wifi_log_%s.txt" % (self.__log_timestamp)
        self.wifi_abs_log = os.path.join(self.__log_dir, self.wifi_base_log)

        self.pid = -1
        self.proc_name = proc_name
        # self._get_thread_pid(self.proc_name)

    def _get_thread_pid(self, proc_name):
        proc = subprocess.Popen(
            "su -c ps | grep -i %s" % proc_name,
            executable=ANDROID_SHELL,
            shell=True,
            stdout=subprocess.PIPE)
        out = proc.communicate()

        try:
            self.pid = str(out[0].split('\n')[0]).split()[1]
            self.log_info("_get_thread_pid: self.pid = %s" % self.pid)
        except:
            self.log_warning("Exception when getting %s threads" % proc_name)


    def run(self):
        ssidTime = {}
        t1 = t2 = t3 = t4 = 0
        flag = 0
        self.log_info("Starting to monitor " + plugin_config["wifi_task"])

        self.log_info("Logs are stored at " + self.wifi_abs_log)
        while True:
            # try:
            with open(self.wifi_abs_log, 'a') as write_log:
                if plugin_config["wifi_task"] == "BSS Info":
                    lines = util.run_shell_cmd("logcat -v usec -s %s -d" % self.proc_name, True).split('\n')
                    util.run_shell_cmd("logcat -c")
                    for line in lines[1:]:
                        if 'wlan0: BSS: Add' in line:
                            ssid = line.split("'")[1]
                            ssidTime[ssid] = [line[0:21], '']
                        if 'wlan0: BSS: Remove' in line:
                            ind = line.index(' SSID')
                            ssid = line[ind:].split("'")[1]
                            if ssid in ssidTime.keys():
                                ssidTime[ssid][1] = line[0:21]
                                output = 'SSID: ' + ssid + '   Add time: ' + ssidTime[ssid][0] + ' Remove time: ' + ssidTime[ssid][0]
                                self.log_info(output)
                                write_log.write(output + '\n')
                        if 'We are connected to' in line:
                            self.log_info(line)
                            write_log.write(line + '\n')

                else:
                    lines = util.run_shell_cmd("logcat -v usec,epoch -s %s -d" % self.proc_name, True).split('\n')
                    util.run_shell_cmd("logcat -c")
                    t1 = t2 = t3 = t4 = 0.
                    for line in lines[1:]:
                        if ('nl80211: Drv Event 47' in line) and flag == 0:
                            flag = 1
                            new_t1 = float(line.split()[0])
                            if new_t1 == t1:
                                continue
                            else:
                                t1 = new_t1
                            self.log_info("Roaming event detected!")

                        if ('nl80211: Associated on' in line) and flag:
                            print 'Associated on ' + line.split()[-2] + 'MHz'

                        if ('nl80211: Associated with' in line) and flag == 1:
                            new_t2 = float(line.split()[0])
                            if new_t2 == t2:
                                continue
                            else:
                                t2 = new_t2
                            if(t2 > t1):
                                self.log_info('Associated with ' + line.split()[-1])
                                write_log.write('Associated with ' + line.split()[-1] + '\n')
                                self.log_info('Association time in roaming = ' + str(int((t2 - t1) * 1000000)) + ' us')
                                write_log.write('Association time in roaming = ' + str(int((t2 - t1) * 1000000)) + ' us\n')
                        if ('wlan0: State: COMPLETED -> ASSOCIATED' in line) and flag:
                            new_t3 = float(line.split()[0])
                            if new_t3 == t3:
                                continue
                            else:
                                t3 = new_t3
                            if(t3 > t2):
                                self.log_info('Authentication time in roaming = ' + str(int((t3 - t2) * 1000000)) + ' us')
                                write_log.write('Authentication time in roaming = ' + str(int((t3 - t2) * 1000000)) + ' us\n')

                        if ('wlan0: CTRL-EVENT-CONNECTED' in line) and flag:
                            new_t4 = float(line.split()[0])
                            if new_t4 == t4:
                                continue
                            else:
                                t4 = new_t4
                            if(t4 > t3):
                                self.log_info('Total roaming time = ' + str(int((t4 - t1) * 1000000)) + ' us')
                                write_log.write('Total roaming time = ' + str(int((t4 - t1) * 1000000)) + ' us\n')
                                flag = 0
            # except:
            #     self.log_warning("run: Exception in getting output!")
            time.sleep(2)


PythonService  = autoclass('org.kivy.android.PythonService')
pyService = PythonService.mService

Context = autoclass('android.content.Context')

mWifiMonitor = WifiMonitor(search_proc[0])

mWifiMonitor.log_info("This plugin requires WiFi to be enabled.")
mWifiManager = pyService.getSystemService(Context.WIFI_SERVICE)
mWifiInfo = mWifiManager.getConnectionInfo()
mWifiMonitor.log_info("We are connected to %s." % mWifiInfo.getSSID())
mWifiMonitor.log_info("Wifi on frequency %s." % mWifiInfo.getFrequency())

mWifiMonitor.log_info("Starting to monitor Wifi activity specified by the analytic task in the settings.")
mWifiMonitor.run()
